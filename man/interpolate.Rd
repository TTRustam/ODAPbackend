% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpolation.R
\name{interpolate}
\alias{interpolate}
\title{\code{interpolate}}
\usage{
interpolate(
  data_in,
  xout = data_in[[xname]],
  method = c("nearest", "linear", "pchip", "cubic", "logarithmic", "geometric", "logit",
    "spline_fmm", "spline_periodic", "spline_natural", "spline_monoH.FC",
    "spline_hyman")[1],
  xname = "x",
  yname = "y",
  extrap = TRUE
)
}
\arguments{
\item{data_in}{data.frame or tibble. Should contain numeric volumns for x and y, although the names may be different than x and y, which you can control using the \code{xname} and \code{yname} arguments. x is the time variable, and y is the thing to interpolate.}

\item{xout}{vector of x values we want interpolated values for. Default is the original x coordinates, meaning you get the same y values back unless you change this variable.}

\item{method}{character. options \code{"nearest"}, \code{"linear"}, \code{"logarithmic"}, \code{"geometric"}, \code{"logit"}, \code{"pchip"}, \code{"cubic"}, \code{"spline_fmm"}, \code{"spline_periodic"}, \code{"spline_natural"}, \code{"spline_monoH.FC"}, \code{"spline_hyman"}.}

\item{xname}{the name of the column holding the time variable}

\item{yname}{the name of the column holding the variable to interpolate}

\item{extrap}{logical, default \code{TRUE.} If \code{xout} exceeds the range of \code{x}}
}
\description{
Several univariate interpolation methods. Methods allowed include nearest neighbor (\code{"nearest"}), Piecewise Cubic Hermite Interpolating Polynomial (\code{"pchip"}), cubic interpolation from four nearest neighbours (\code{"cubic"}), and \code{"spline"} interpolation using  assorted methods available in \code{stats::splinefun()}. \code{"linear"},"\code{logarithmic}",\code{"geometric"}, and \code{"logit"} interpolation are also possible based on linear interpolations of y transforms.
}
\details{
Logarithmic interpolation requires all values by greater than 0, geometric requires non-negative values, and logit requires all values to be between 0 and 1.
}
\examples{
library(tibble)
x <- c(18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 
       63, 66, 69, 72)
y <- c(1, 2267, 7914, 14540, 21261, 28700, 36647, 43381, 49306, 54509, 
58749, 61197, 62578, 63394, 63820, 63975, 64040, 64058, 64058)
xout = 10:80
data_in <- tibble(x = x, y = y)
\dontrun{
plot(data_in, xlim = c(10,80))
lines(interpolate(data_in, method = "pchip", xout = 10:80)$interp)
lines(interpolate(data_in, method = "logarithmic", xout = 10:80)$interp, col = "red")
lines(interpolate(data_in, method = "spline_monoH.FC", xout = 10:80)$interp,
      col = "blue", lty = "28")
}
}
